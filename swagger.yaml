openapi: 3.0.3
info:
  title: METACALL
  description: Api for Metacall Faas
  version: 0.0.1
servers:
  - url: 'https://{serverURL}/'
    variables:
      serverURL:
        default: dashboard.metacall.io


paths:
  /api/billing/list-subscriptions:
    get:
      summary: Retrieve information about this service
      description: >-
        gives you a list of the subscription available    
      operationId: GetSubscriptionsList
      security:
        - JwtAuth: []
      responses:
        '200':
          $ref: '#/components/responses/200ServiceInfo'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Billing
        
        
  /api/account/refresh-token:
    get:
      summary: Retrieve information about this service
      description: >-
        updates the auth token    
      operationId: GetRefreshToken
      security:
        - JwtAuth: []      
      responses:
        '200':
          $ref: '#/components/responses/200ServiceInfo'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Auth
  /validate:
    get:
      summary: Retrieve information about this service
      description: >-
        validates the auth token    
      operationId: ValidateToken
      security:
        - JwtAuth: []
      responses:
        '200':
          $ref: '#/components/responses/200ServiceInfo'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Auth
        
        
  /api/account/deploy-enabled:
    get:
      summary: Retrieve information about this service
      description: >-
        checks if you're able to deploy    
      operationId: DeployEnabled
      security:
        - JwtAuth: []
      responses:
        '200':
          $ref: '#/components/responses/200ServiceInfo'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Account
        
  /api/inspect:
    get:
      summary: Retrieve information about this service
      description: >-
        gives you are deploys with it's endpoints    
      operationId: Inspect
      security:
        - JwtAuth: []
      responses:
        '200':
          $ref: '#/components/responses/200ServiceInfo'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Account
        
        
  /api/package/create:
    post:
      summary: Retrieve information about this service
      description: >-
        deploys the previously uploaded zip into the faas
      operationId: UploadPackage
      security:
        - JwtAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UploadZip'
      responses:
        '200':
          $ref: '#/components/responses/200ServiceInfo'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Packages
        
  /api/deploy/create:
    post:
      summary: Retrieve information about this service
      description: >-
        deploys the previously uploaded zip into the faas
      operationId: CreateDeploy
      requestBody:
        $ref: '#/components/requestBodies/CreateDeployment'
      security:
        - JwtAuth: []
      responses:
        '200':
          $ref: '#/components/responses/200ServiceInfo'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Deployments
        
  /api/deploy/delete:
    post:
      summary: Retrieve information about this service
      description: >-
        deletes the deploy and the zip
      operationId: DeleteDeploy
      security:
        - JwtAuth: []
      requestBody:
        $ref: '#/components/requestBodies/DeployDelete'
      responses:
        '200':
          $ref: '#/components/responses/200ServiceInfo'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Deployments
        
        
  

components:
  securitySchemes:
    JwtAuth:            
      type: apiKey
      name: Authorization
      in: header
      description: >-
          A valid refresh token must be passed in Authorization header as 'jwt ' + token

  schemas:
    
    Service:
      description: GA4GH service
      type: object
      required:
        - id
        - name
        - type
        - organization
        - version
      properties:
        id:
          type: string
          description: >-
            Unique ID of this service. Reverse domain name notation is
            recommended, though not required. The identifier should attempt to
            be globally unique so it can be used in downstream aggregator
            services e.g. Service Registry.
          example: org.ga4gh.myservice
        name:
          type: string
          description: Name of this service. Should be human readable.
          example: My project

        description:
          type: string
          description: >-
            Description of the service. Should be human readable and provide
            information about the service.
          example: This service provides...
        organization:
          type: object
          description: Organization providing the service
          required:
            - name
            - url
          properties:
            name:
              type: string
              description: Name of the organization responsible for the service
              example: My organization
            url:
              type: string
              format: uri
              description: URL of the website of the organization (RFC 3986 format)
              example: 'https://example.com'
        contactUrl:
          type: string
          format: uri
          description: >-
            URL of the contact for the provider of this service, e.g. a link to
            a contact form (RFC 3986 format), or an email (RFC 2368 format).
          example: 'mailto:support@example.com'
        documentationUrl:
          type: string
          format: uri
          description: >-
            URL of the documentation of this service (RFC 3986 format). This
            should help someone learn how to use your service, including any
            specifics required to access data, e.g. authentication.
          example: 'https://docs.myservice.example.com'
        createdAt:
          type: string
          format: date-time
          description: >-
            Timestamp describing when the service was first deployed and
            available (RFC 3339 format)
          example: '2019-06-04T12:58:19Z'
        updatedAt:
          type: string
          format: date-time
          description: >-
            Timestamp describing when the service was last updated (RFC 3339
            format)
          example: '2019-06-04T12:58:19Z'
        environment:
          type: string
          description: >-
            Environment the service is running in. Use this to distinguish
            between production, development and testing/staging deployments.
            Suggested values are prod, test, dev, staging. However this is
            advised and not enforced.
          example: test
        version:
          type: string
          description: >-
            Version of the service being described. Semantic versioning is
            recommended, but other identifiers, such as dates or commit hashes,
            are also allowed. The version should be changed whenever the service
            is updated.
          example: 1.0.0
    DrsService:
      type: object
      required:
        - type
      properties:
        type:
          type: object
          required:
            - artifact
          properties:
            artifact:
              type: string
              enum:
                - drs
              example: drs
    Error:
      type: object
      description: An object that can optionally include information about the error.
      properties:
        msg:
          type: string
          description: A detailed error message.
        status_code:
          type: integer
          description: 'The integer representing the HTTP status code (e.g. 200, 404).'
    Checksum:
      type: object
      required:
        - checksum
        - type
      properties:
        checksum:
          type: string
          description: The hex-string encoded checksum for the data
        type:
          type: string
          description: >-
            The digest method used to create the checksum.

            The value (e.g. `sha-256`) SHOULD be listed as `Hash Name String` in
            the
            https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg[IANA
            Named Information Hash Algorithm Registry]. Other values MAY be
            used, as long as implementors are aware of the issues discussed in
            https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].

            GA4GH may provide more explicit guidance for use of
            non-IANA-registered algorithms in the future. Until then, if
            implementors do choose such an algorithm (e.g. because it's
            implemented by their storage provider), they SHOULD use an existing
            standard `type` value such as `md5`, `etag`, `crc32c`, `trunc512`,
            or `sha1`.
          example: sha-256
    AccessURL:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: >-
            A fully resolvable URL that can be used to fetch the actual object
            bytes.
        headers:
          type: array
          items:
            type: string
          description: >-
            An optional list of headers to include in the HTTP request to `url`.
            These headers can be used to provide auth tokens required to fetch
            the object bytes.
          example: 'Authorization: Basic Z2E0Z2g6ZHJz'
    AccessMethod:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - s3
            - gs
            - ftp
            - gsiftp
            - globus
            - htsget
            - https
            - file
          description: Type of the access method.
        access_url:
          $ref: '#/components/schemas/AccessURL'
          description: >-
            An `AccessURL` that can be used to fetch the actual object bytes.
            Note that at least one of `access_url` and `access_id` must be
            provided.
        access_id:
          type: string
          description: >-
            An arbitrary string to be passed to the `/access` method to get an
            `AccessURL`. This string must be unique within the scope of a single
            object. Note that at least one of `access_url` and `access_id` must
            be provided.
        region:
          type: string
          description: >-
            Name of the region in the cloud service provider that the object
            belongs to.
          example: us-east-1
    ContentsObject:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: >-
            A name declared by the bundle author that must be used when
            materialising this object, overriding any name directly associated
            with the object itself. The name must be unique with the containing
            bundle. This string is made up of uppercase and lowercase letters,
            decimal digits, hypen, period, and underscore [A-Za-z0-9.-_]. See
            http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable
            filenames].
        id:
          type: string
          description: >-
            A DRS identifier of a `DrsObject` (either a single blob or a nested
            bundle). If this ContentsObject is an object within a nested bundle,
            then the id is optional. Otherwise, the id is required.
        drs_uri:
          type: array
          description: >-
            A list of full DRS identifier URI paths that may be used to obtain
            the object. These URIs may be external to this DRS instance.
          example: 'drs://drs.example.org/314159'
          items:
            type: string
        contents:
          type: array
          description: >-
            If this ContentsObject describes a nested bundle and the caller
            specified "?expand=true" on the request, then this contents array
            must be present and describe the objects within the nested bundle.
          items:
            $ref: '#/components/schemas/ContentsObject'
    DrsObject:
      type: object
      required:
        - id
        - self_uri
        - size
        - created_time
        - checksums
      properties:
        id:
          type: string
          description: An identifier unique to this `DrsObject`
        name:
          type: string
          description: >-
            A string that can be used to name a `DrsObject`.

            This string is made up of uppercase and lowercase letters, decimal
            digits, hypen, period, and underscore [A-Za-z0-9.-_]. See
            http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable
            filenames].
        self_uri:
          type: string
          description: >-
            A drs:// hostname-based URI, as defined in the DRS documentation,
            that tells clients how to access this object.

            The intent of this field is to make DRS objects self-contained, and
            therefore easier for clients to store and pass around.  For example,
            if you arrive at this DRS JSON by resolving a compact
            identifier-based DRS URI, the `self_uri` presents you with a
            hostname and properly encoded DRS ID for use in subsequent `access`
            endpoint calls.
          example: 'drs://drs.example.org/314159'
        size:
          type: integer
          format: int64
          description: >-
            For blobs, the blob size in bytes.

            For bundles, the cumulative size, in bytes, of items in the
            `contents` field.
        created_time:
          type: string
          format: date-time
          description: >-
            Timestamp of content creation in RFC3339.

            (This is the creation time of the underlying content, not of the
            JSON object.)
        updated_time:
          type: string
          format: date-time
          description: >-
            Timestamp of content update in RFC3339, identical to `created_time`
            in systems that do not support updates. (This is the update time of
            the underlying content, not of the JSON object.)
        version:
          type: string
          description: >-
            A string representing a version.

            (Some systems may use checksum, a RFC3339 timestamp, or an
            incrementing version number.)
        mime_type:
          type: string
          description: A string providing the mime-type of the `DrsObject`.
          example: application/json
        checksums:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Checksum'
          description: >-
            The checksum of the `DrsObject`. At least one checksum must be
            provided.

            For blobs, the checksum is computed over the bytes in the blob.

            For bundles, the checksum is computed over a sorted concatenation of
            the checksums of its top-level contained objects (not recursive,
            names not included). The list of checksums is sorted alphabetically
            (hex-code) before concatenation and a further checksum is performed
            on the concatenated checksum value.

            For example, if a bundle contains blobs with the following
            checksums:

            md5(blob1) = 72794b6d

            md5(blob2) = 5e089d29

            Then the checksum of the bundle is:

            md5( concat( sort( md5(blob1), md5(blob2) ) ) )

            = md5( concat( sort( 72794b6d, 5e089d29 ) ) )

            = md5( concat( 5e089d29, 72794b6d ) )

            = md5( 5e089d2972794b6d )

            = f7a29a04
        access_methods:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AccessMethod'
          description: >-
            The list of access methods that can be used to fetch the
            `DrsObject`.

            Required for single blobs; optional for bundles.
        contents:
          type: array
          description: >-
            If not set, this `DrsObject` is a single blob.

            If set, this `DrsObject` is a bundle containing the listed
            `ContentsObject` s (some of which may be further nested).
          items:
            $ref: '#/components/schemas/ContentsObject'
        description:
          type: string
          description: A human readable description of the `DrsObject`.
        aliases:
          type: array
          items:
            type: string
          description: >-
            A list of strings that can be used to find other metadata about this
            `DrsObject` from external metadata sources. These aliases can be
            used to represent secondary accession numbers or external GUIDs.
  responses:
    200ServiceInfo:
      description: Retrieve info about the DRS service
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Service'
              - $ref: '#/components/schemas/DrsService'
    500InternalServerError:
      description: An unexpected error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    200OkDrsObject:
      description: The `DrsObject` was found successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DrsObject'
    202Accepted:
      description: >
        The operation is delayed and will continue asynchronously. The client
        should retry this same request after the delay specified by Retry-After
        header.
      headers:
        Retry-After:
          description: >
            Delay in seconds. The client should retry this same request after
            waiting for this duration. To simplify client response processing,
            this must be an integral relative time in seconds. This value SHOULD
            represent the minimum duration the client should wait before
            attempting the operation again with a reasonable expectation of
            success. When it is not feasible for the server to determine the
            actual expected delay, the server may return a brief, fixed value
            instead.
          schema:
            type: integer
            format: int64
    400BadRequest:
      description: The request is malformed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    401Unauthorized:
      description: The request is unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    403Forbidden:
      description: The requester is not authorized to perform this action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    404NotFoundDrsObject:
      description: The requested `DrsObject` wasn't found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    200OkAccess:
      description: The `AccessURL` was found successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccessURL'
    404NotFoundAccess:
      description: The requested `AccessURL` wasn't found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    uploadZip:
      in: path
      name: object_id
      required: true
      description: '`DrsObject` identifier'
      schema:
        type: string
    ObjectId:
      in: path
      name: object_id
      required: true
      description: '`DrsObject` identifier'
      schema:
        type: string
    Expand:
      in: query
      name: expand
      schema:
        type: boolean
      example: false
      description: >-
        If false and the object_id refers to a bundle, then the ContentsObject
        array contains only those objects directly contained in the bundle. That
        is, if the bundle contains other bundles, those other bundles are not
        recursively included in the result.

        If true and the object_id refers to a bundle, then the entire set of
        objects in the bundle is expanded. That is, if the bundle contains
        aother bundles, then those other bundles are recursively expanded and
        included in the result. Recursion continues through the entire sub-tree
        of the bundle.

        If the object_id refers to a blob, then the query parameter is ignored.
    AccessId:
      in: path
      name: access_id
      required: true
      description: An `access_id` from the `access_methods` list of a `DrsObject`
      schema:
        type: string
  requestBodies:
    UploadZip:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              id:
                type: string
                description: 'Name'
              type:
                type: string
                default: 'application/x-zip-compressed'
                description: 'application/x-zip-compressed'
              jsons:
                type: string
                description: 'MetaCall JSONS'
              runners:
                type: string
              raw:
                type: string
                format: binary
    DeployDelete:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              prefix:
                type: string
                description: 'Name'
              suffix:
                type: string
                description: 'Suffix'
              version:
                type: string
                description: 'Version'
                default: 'v1'
    CreateDeployment:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              resourceType:
                type: string
                description: 'Package'
                default: 'Package'
              suffix:
                type: string
                description: 'Name of package'
              release:
                type: string
                description: 'Default set to current date in hexadecimal form'
                
              version:
                type: string
                description: 'Version'
                default: 'v1'
                
    PostObjectBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              expand:
                type: boolean
                example: false
                description: >-
                  If false and the object_id refers to a bundle, then the
                  ContentsObject array contains only those objects directly
                  contained in the bundle. That is, if the bundle contains other
                  bundles, those other bundles are not recursively included in
                  the result.

                  If true and the object_id refers to a bundle, then the entire
                  set of objects in the bundle is expanded. That is, if the
                  bundle contains aother bundles, then those other bundles are
                  recursively expanded and included in the result. Recursion
                  continues through the entire sub-tree of the bundle.

                  If the object_id refers to a blob, then the query parameter is
                  ignored.
              passports:
                type: array
                items:
                  type: string
                  example: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJnYTRnaF9wYXNzcG9ydF92MSI6W119.JJ5rN0ktP0qwyZmIPpxmF_p7JsxAZH6L6brUxtad3CM
                description: >-
                  the encoded JWT GA4GH Passport that contains embedded Visas. 
                  The overall JWT is signed as are the individual Passport
                  Visas.
    Passports:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              passports:
                type: array
                items:
                  type: string
                  example: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJnYTRnaF9wYXNzcG9ydF92MSI6W119.JJ5rN0ktP0qwyZmIPpxmF_p7JsxAZH6L6brUxtad3CM
                description: >-
                  the encoded JWT GA4GH Passport that contains embedded Visas. 
                  The overall JWT is signed as are the individual Passport
                  Visas.
